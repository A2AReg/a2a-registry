name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    runs-on: ubuntu-latest
    # Note: No external services needed - all Redis and Elasticsearch calls are mocked in tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=sqlite:///./test.db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "ELASTICSEARCH_URL=http://localhost:9200" >> $GITHUB_ENV
        echo "ELASTICSEARCH_INDEX=a2a_agents_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci-cd-pipeline-very-long-and-secure" >> $GITHUB_ENV
        echo "ALGORITHM=HS256" >> $GITHUB_ENV
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV
        echo "APP_NAME=A2A Agent Registry Test" >> $GITHUB_ENV
        echo "APP_VERSION=1.0.0" >> $GITHUB_ENV
        echo "REGISTRY_BASE_URL=http://localhost:8000" >> $GITHUB_ENV
        echo "MAX_AGENTS_PER_CLIENT=1000" >> $GITHUB_ENV
        echo "ENABLE_FEDERATION=false" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        # Skip migrations for mocked tests - using SQLite in-memory database
        echo "Skipping database migrations - using mocked services"
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run black
      run: |
        black --check app/ tests/
    
    - name: Run isort
      run: |
        isort --check-only app/ tests/
    
    - name: Run flake8
      run: |
        flake8 app/ tests/
    
    - name: Run mypy
      run: |
        # Skip mypy for now due to extensive SQLAlchemy type issues
        # TODO: Fix SQLAlchemy model type annotations
        echo "Skipping mypy - SQLAlchemy type issues need to be resolved"
        # mypy app/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run safety check
      run: |
        safety check
    
    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.4.0
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      timeout-minutes: 10
      with:
        context: .
        file: ./Dockerfile.prod
        push: false
        tags: a2a-registry:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm a2a-registry:latest python -c "import app; print('App imports successfully')"
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push to GitHub Container Registry
      uses: docker/build-push-action@v5
      timeout-minutes: 10
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
